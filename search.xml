<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[NODE.JS的一些使用小技巧]]></title>
    <url>%2F2018%2F05%2F25%2Fnode.js-use%2F</url>
    <content type="text"><![CDATA[技巧一：简化查询NODE.JS的文件树结构我们经常使用 npm ls 的时候会看见长篇的文件树结构，完全看不清自己安装了什么模块，这时候我们可以使用 npm ls --depth=0 查看安装的模块，会发现安装结构变的很清晰明了 例如使用：npm ls -g 使用 npm ls -g --depth=0 技巧二：使用nrm来管理NODE.JS的代理使用 npm install 下载速度简直让人抓狂，这时候我们可以使用nrm来管理NODE.JS的代理，加快下载速度 安装nrm使用npm安装nrm1$ npm install -g nrm --registry=https://registry.npm.taobao.org 使用命令行 nrm ls 查看nrm的代理列表，未选中代理之前默认使用的是 npm 源，我这里已经切换到了 taobao 源 使用命令行 nrm test 测试各代理源的速度，延迟越低，下载速度越快 从图中可以看出当前的taobao源的下载速度最快，这时候我们可以使用 nrm use 命令行切换代理源例如：1$ nrm use taobao 技巧三：管理npm配置文件常用命令行 设置配置项：npm config set &lt;key&gt; &lt;value&gt; 删除配置项：npm config delete &lt;key&gt; 获取配置项的值：npm config get &lt;key&gt; 显示当前配置：npm config list 常用代理地址 淘宝 NPM 镜像地址：https://npm.taobao.org 开源镜像：https://npm.taobao.org/mirrors node-sass的代理配置使用命令行：1$ npm config set SASS_BINARY_SITE "http://npm.taobao.org/mirrors/node-sass/" -EOF-]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WINDOWS平台下MAVEN的安装和配置]]></title>
    <url>%2F2018%2F05%2F25%2Fwindows-maven-install%2F</url>
    <content type="text"><![CDATA[MAVEN的安装下载MAVEN使用百度搜索关键字“Maven” 或者直接打开网址： http://maven.apache.org/ 选择“Download”界面 选择一个版本进行下载 当前最新版下载地址：v3.5.0 安装MAVEN等待下载完成，将下载的压缩包解压，例如我将压缩包解压到“D盘” 配置环境变量打开控制面板 选择系统 打开高级系统设置 打开环境变量配置 新建变量名“MAVEN_HOME”，变量值为MAVEN解压后的根路径例如：变量名：MAVEN_HOME变量值：D:\apache-maven-3.5.0 将MAVEN_HOME配置到Path中 例如：%MAVEN_HOME%\bin（注意，Path变量值如果是在最后，则不用“;”） 验证MAVEN是否安装成功使用 Win+R 键，打开运行界面，输入 cmd ，打开控制台 在控制台中输入 mvn --version ，有输出MAVEN信息时，你的MAVEN就安装成功了，反之则不成功 MAVEN的配置打开MAVEN根目录下conf文件夹中的settings.xml文件 修改MAVEN本地仓库地址settings.xml 中的 settings &gt; localRepository 可以修改MAVEN的本地仓库地址例如，我修改的是1&lt;localRepository&gt;E:/.m2/repository&lt;/localRepository&gt; 修改MAVEN代理配置settings.xml 中的 settings &gt; mirrors 可以修改MAVEN的代理配置例如，我修改的是123456&lt;mirror&gt; &lt;id&gt;nexus-aliyun&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;Nexus aliyun&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;&lt;/mirror&gt; -EOF-]]></content>
      <categories>
        <category>项目管理工具</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WINDOWS平台下CMDER的安装和配置]]></title>
    <url>%2F2018%2F05%2F25%2Fwindows-cmder-install%2F</url>
    <content type="text"><![CDATA[CMDER的安装下载CMDER打开GITHUB，搜索 cmder ，进入 cmder 的项目主页 选择GITHUB的版本发布选项，打开版本发布界面 选择一个发布版，进行下载 当前最新版下载地址：v1.3.2下载地址 安装CMDER等待下载完成，将下载的压缩包解压，例如我将压缩包解压到“C盘” 配置环境变量打开控制面板 选择系统 打开高级系统设置 打开环境变量配置 新建变量名“CMDER_HOME”，变量值为CMDER解压后的根路径例如：变量名：CMDER_HOME变量值：C:\Users\****\AppData\Local\cmder_mini 将CMDER_HOME配置到Path中 例如：%CMDER_HOME%（注意，Path变量值如果是在最后，则不用打“;”） 验证CMDER是否安装成功使用 Win+R 键，打开运行界面，输入 cmder ，运行正常则 cmder 安装成功 将CMDER加入Windows的右键菜单中在管理员权限的终端输入命令行 Cmder.exe /REGISTER ALL 即可将 cmder 加入到Windows的右键菜单中 输入命令行1Cmder.exe /REGISTER ALL 效果图如下 -EOF-]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>cmder</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WINDOWS平台下MySQL的安装和配置]]></title>
    <url>%2F2018%2F05%2F25%2Fwindows-mysql-install%2F</url>
    <content type="text"><![CDATA[MySQL的安装下载MySQL使用百度搜索关键字“MySQL 官网” 或者直接打开网址：https://www.mysql.com/ 选择 Downloads &gt; Community &gt; MySQL Community Server 打开下载界面 选择5.6的版本，因为5.7的安装比较坑 选择对应的平台，进行下载 点击下载后，这里会看到一个准备开始下载的界面，点击 No thanks, just start my download. 就可以开始下载MySQL了 当前最新GA版下载地址：v5.6.37 安装MySQL等待下载完成（由于时间关系，我就使用已经下载过的v5.6.31进行演示），将下载的压缩包解压，例如我将压缩包解压到“D盘” 配置环境变量右键单击我的电脑，选择属性，打开系统设置 打开高级系统设置 打开环境变量配置 新建变量名“MYSQL_HOME”，变量值为MySQL解压后的根路径例如：变量名：MYSQL_HOME变量值：D:\mysql-5.6.31-winx64 将MYSQL_HOME配置到Path中 例如：%MYSQL_HOME%\bin（注意，Path变量值如果是在最后，则不用“;”） 配置MySQL编辑MySQL根目录下的 my-default.ini 文件 12345678910111213141516171819202122232425262728293031323334353637383940414243# For advice on how to change settings please see# http://dev.mysql.com/doc/refman/5.6/en/server-configuration-defaults.html# *** DO NOT EDIT THIS FILE. It's a template which will be copied to the# *** default location during install, and will be replaced if you# *** upgrade to a newer version of MySQL.[mysql]# 设置客户端默认字符集default-character-set = utf8 [mysqld]# Remove leading # and set to the amount of RAM for the most important data# cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.# innodb_buffer_pool_size = 128M# Remove leading # to turn on a very important data integrity option: logging# changes to the binary log between backups.# log_bin# These are commonly set, remove the # and set as required.# basedir = .....# datadir = .....# port = .....# server_id = .....# 设置服务端字符集character-set-server = utf8# 设置安装目录basedir = %MYSQL_HOME%# 设置数据存放目录datadir = %MYSQL_HOME%\data# 设置3306端口port = 3306 # Remove leading # to set options mainly useful for reporting servers.# The server defaults are faster for transactions and fast SELECTs.# Adjust sizes as needed, experiment to find the optimal values.# join_buffer_size = 128M# sort_buffer_size = 2M# read_rnd_buffer_size = 2M # 设置数据模式sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES 初始化MySQL打开拥有管理员权限的终端 切换到MySQL的bin目录下 执行命令 mysqld --install ，看见 Service successfully installed. 代表MySQL初始化成功，否则初始化不成功 卸载MySQL首先需要停止MySQL服务（如何停止MySQL的服务下面会将），然后打开拥有管理员权限的终端，切换到MySQL的bin目录下 执行命令 mysqld --remove ，看见 Service successfully removed. 代表MySQL卸载成功，否则卸载不成功 启动MySQL使用 Win+R 键，打开运行界面，输入 cmd ，打开终端，输入 net start mysql ，看见“MySQL 服务启动成功时”，就代表MySQL服务启动成功了 停止MySQL使用 Win+R 键，打开运行界面，输入 cmd ，打开终端，输入 net stop mysql ，看见“MySQL 服务已成功停止”时，就代表MySQL服务停止成功了 使用小技巧登录MySQL使用Win+R键，打开运行界面，输入cmd，打开终端，输入 mysql -u 你的用户名 -p ，MySQL的默认用户是root，密码为空例如：mysql -u root -p 输入密码，若密码为空，直接回车即可 修改root用户的密码使用root用户登录后，使用 use mysql; 命令切换到mysql数据库 使用命令行update user set password=password(&#39;你的密码&#39;) where user=&#39;root&#39;;来修改root用户的密码例如：update user set password=password(&#39;1&#39;) where user=&#39;root&#39;; 使用命令行 flush privileges; 使新配置的用户信息立即生效 允许任何IP访问MySQL的root用户使用root用户登录后，使用 use mysql; 命令切换到mysql数据库 使用命令行 select user,host from user; 查询root用户的访问权限 使用命令行 grant all privileges on *.* to &#39;需要设置的用户&#39;@&#39;允许访问的IP&#39; identified by &#39;访问的密码&#39; with grant option; 为MySQL增加一行访问权限例如：grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;1&#39; with grant option; IP设置成 % 的意思是允许任何IP的访问 使用命令行 flush privileges; 使新配置的权限立即生效 再次查询root用户的权限，这次已经多了一个 % 的权限了 -EOF-]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WINDOWS平台下IDEA的安装和配置]]></title>
    <url>%2F2018%2F05%2F25%2Fwindows-idea-install%2F</url>
    <content type="text"><![CDATA[IDEA的安装下载IDEA打开IDEA的官网：https://www.jetbrains.com/idea/ 选择“DOWNLOAD”，跳转至下载界面 下载界面说明 这里我们选择“Ultimate（旗舰版）”下载进行安装演示，点击DOWNLOAD按钮，即可开始下载 当前最新版下载地址：v2017.2.2 安装IDEA等待下载完成，双击下载完成的exe文件，打开安装界面 选择Next 选择IDEA的安装目录，我这里是将IDEA安装到“D盘” 选择自己喜欢的配置，然后Next 选择Install开始安装 等待安装进度条结束后选择Finish，完成IDEA的安装 IDEA的配置点击IDEA的启动快捷方式，启动IDEA 单击OK按钮 激活方式请自行百度 选择一个喜欢的主题，然后选择Next 选择需要使用的插件，默认就好，然后选择Next 是否需要安装一些特殊插件的支持，默认就好，然后选择Next 看到如下界面，代表IDEA配置完成 IDEA的使用小技巧关闭IDEA的自动升级选择IDEA的Settings的选项，打开IDEA的设置界面 去掉IDEA的自动升级的功能 去掉拼写检查选择IDEA的Settings的选项，打开IDEA的设置界面 去掉IDEA的拼写检查的功能 IDEA每次启动不开启任何项目选择IDEA的Settings的选项，打开IDEA的设置界面 去掉IDEA的自动启动最后关闭的项目的功能 关闭IDEA确认退出选项选择IDEA的Settings的选项，打开IDEA的设置界面 去掉关闭IDEA确认退出选项的功能 启动代码方法分割线选择IDEA的Settings的选项，打开IDEA的设置界面 开启代码方法分割线的功能 配置Tomcat选择IDEA的Settings的选项，打开IDEA的设置界面 打开服务配置界面 增加Tomcat服务 选择本机已安装的Tomcat服务 完成Tomcat的配置 配置MAVEN选择IDEA的Settings的选项，打开IDEA的设置界面 选择本机已安装的MAVEN地址 -EOF-]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript 语言]]></title>
    <url>%2F2018%2F05%2F24%2FJavaScript-%E8%AF%AD%E8%A8%80%2F</url>
    <content type="text"><![CDATA[注：摘抄自dva.js 知识导图 变量声明const 和 let不要用 var，而是用 const 和 let，分别表示常量和变量。不同于 var 的函数作用域，const 和 let 都是块级作用域。 1234const DELAY = 1000;let count = 0;count = count + 1; 默认参数12345function logActivity(activity = 'skiing') &#123; console.log(activity);&#125;logActivity(); // skiing 模板字符串模板字符串提供了另一种做字符串组合的方法。 12345678const user = 'world';console.log(`hello $&#123;user&#125;`); // hello world// 多行const content = ` Hello $&#123;firstName&#125;, Thanks for ordering $&#123;qty&#125; tickets to $&#123;event&#125;.`; 箭头函数函数的快捷写法，不需要通过 function 关键字创建函数，并且还可以省略 return 关键字。 同时，箭头函数还会继承当前上下文的 this 关键字。 比如： 1[1, 2, 3].map(x =&gt; x + 1); // [2, 3, 4] 等同于： 123[1, 2, 3].map((function(x) &#123; return x + 1;&#125;).bind(this)); 模块的 Import 和 Exportimport 用于引入模块，export 用于导出模块。 比如： 123456789101112131415// 引入全部import React from 'react';// 引入部分import &#123; Component &#125; from 'react';import &#123; Row, Col &#125; from 'antd';// 引入全部并作为 github 对象import * as github from './services/github';// 导出默认export default App;// 部分导出，需 import &#123; App &#125; from './file'; 引入export class App extend Component &#123;&#125;; ES6 对象和数组析构赋值析构赋值让我们从 Object 或 Array 里取部分数据存为变量。 123456789// 对象const user = &#123; name: 'guanguan', age: 2 &#125;;const &#123; name, age &#125; = user;console.log(`$&#123;name&#125; : $&#123;age&#125;`); // guanguan : 2// 数组const arr = [1, 2];const [foo, bar] = arr;console.log(foo); // 1 我们也可以析构传入的函数参数。 123const add = (state, &#123; payload &#125;) =&gt; &#123; return state.concat(payload);&#125;; 析构时还可以配 alias，让代码更具有语义。 123const add = (state, &#123; payload: todo &#125;) =&gt; &#123; return state.concat(todo);&#125;; 对象字面量改进这是析构的反向操作，用于重新组织一个 Object 。 1234const name = 'duoduo';const age = 8;const user = &#123; name, age &#125;; // &#123; name: 'duoduo', age: 8 &#125; 定义对象方法时，还可以省去 function 关键字。 12345678app.model(&#123; reducers: &#123; add() &#123;&#125; // 等同于 add: function() &#123;&#125; &#125;, effects: &#123; *addRemote() &#123;&#125; // 等同于 addRemote: function*() &#123;&#125; &#125;,&#125;); Spread OperatorSpread Operator 即 3 个点 ...，有几种不同的使用方法。 可用于组装数组。 12const todos = ['Learn dva'];[...todos, 'Learn antd']; // ['Learn dva', 'Learn antd'] 也可用于获取数组的部分项。 1234567const arr = ['a', 'b', 'c'];const [first, ...rest] = arr;rest; // ['b', 'c']// With ignoreconst [first, , ...rest] = arr;rest; // ['c'] 还可收集函数参数为数组。 1234function directions(first, ...rest) &#123; console.log(rest);&#125;directions('a', 'b', 'c'); // ['b', 'c']; 代替 apply。 123456function foo(x, y, z) &#123;&#125;const args = [1,2,3];// 下面两句效果相同foo.apply(null, args);foo(...args); 对于 Object 而言，用于组合成新的 Object 。(ES2017 stage-2 proposal) 1234567891011const foo = &#123; a: 1, b: 2,&#125;;const bar = &#123; b: 3, c: 2,&#125;;const d = 4;const ret = &#123; ...foo, ...bar, d &#125;; // &#123; a:1, b:3, c:2, d:4 &#125; PromisesPromise 用于更优雅地处理异步请求。比如发起异步请求： 1234fetch('/api/todos') .then(res =&gt; res.json()) .then(data =&gt; (&#123; data &#125;)) .catch(err =&gt; (&#123; err &#125;)); 定义 Promise 。 123456789const delay = (timeout) =&gt; &#123; return new Promise(resolve =&gt; &#123; setTimeout(resolve, timeout); &#125;);&#125;;delay(1000).then(_ =&gt; &#123; console.log('executed');&#125;); -EOF-]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F05%2F24%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>建站知识</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
